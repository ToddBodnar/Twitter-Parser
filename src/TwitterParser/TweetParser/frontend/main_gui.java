/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package TwitterParser.TweetParser.frontend;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import TwitterParser.TweetParser.settings;
import TwitterParser.TweetParser.filters.tweetFilter;
import TwitterParser.TweetParser.processors.twitterprocess;
import TwitterParser.helpers.JobFileIO;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author toddbodnar
 */
public class main_gui extends javax.swing.JFrame {

    /**
     * Creates new form mainGui
     */
    public main_gui() {
        initComponents();
        processes = new LinkedList<twitterprocess>();
        dates = new int[]{20110402,20110402};
       
       
        for(twitterprocess i: JobFileIO.processlist)
        {
            jMenu4.add(new addProcess(i,processes,jList1));
        }
        
        for(tweetFilter f:JobFileIO.filters)
        {
            jMenu4.add(new addFilter(f,JobFileIO.processlist,processes,jList1,JobFileIO.filters.length-1));
        }
       
        jobs = new LinkedList<job>();
        
        new Thread(new doJob(jobs,this)).start();
    }
    
    public void updateQueue()
    {
        String s = "";
        for(job j:jobs)
            s+=j.toString()+"\n";
        
        jTextArea1.setText(s);
    }
    
    String dataset[] = new String[]{"/Users/toddbodnar/data/20110420/"};
    int dates[];

    private List<twitterprocess> processes;
    List<job> jobs;
    
    private class doJob implements Runnable
    {
        public doJob(List<job> j, main_gui G)
        {
            jobs = j;
            g = G;
        }
        @Override
        public void run() {
            while(true)
            {
                while(jobs.isEmpty())
                {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                job j = jobs.get(0);
                
                try {
                    tweet_consumer.consume(j.data,j.process,"",g);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                }
                jobs.remove(j);
                g.updateQueue();
            }
        }
        private List<job> jobs;
        main_gui g;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenu5 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        prog = new javax.swing.JProgressBar();
        timeremaining = new javax.swing.JLabel();
        inputbuffer = new javax.swing.JProgressBar();
        tweetbuffer = new javax.swing.JProgressBar();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        jMenu5.setText("jMenu5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Process");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setColumns(20);
        jList1.setEditable(false);
        jList1.setRows(5);
        jScrollPane2.setViewportView(jList1);

        jTextField1.setEditable(false);
        jTextField1.setText("Select Data Set");

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Job Queue");

        timeremaining.setText("Waiting");

        jLabel2.setText("End Report");

        reportArea.setColumns(20);
        reportArea.setEditable(false);
        reportArea.setRows(5);
        jScrollPane3.setViewportView(reportArea);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSeparator1)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                            .add(jTextField1)
                            .add(jScrollPane2)
                            .add(jSeparator3)
                            .add(tweetbuffer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(prog, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator2)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1)
                            .add(inputbuffer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jButton1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jButton2))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(timeremaining)
                                    .add(jLabel2))
                                .add(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(prog, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(timeremaining)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(inputbuffer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tweetbuffer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem5.setText("Open Script");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setText("Save Script");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem7.setText("Settings");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Data Set");

        jMenuItem2.setText("One Day");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Full Data");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Custom");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Process");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 2, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        processes.clear();
        jList1.setText("");
    }                                        

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        dataset = new String[]{"/Users/toddbodnar/data/"};
        dataset = new String[]{settings.data_location};
        dates = new int[]{20110000,20200000};
       
        jTextField1.setText("Full Data");
    }                                          

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int begin = Integer.parseInt(JOptionPane.showInputDialog("Begin day (YYYYMMDD)"));
        int end = Integer.parseInt(JOptionPane.showInputDialog("End day (YYYYMMDD)"));
        dataset = new String[end-begin+1];
        dates = new int[]{begin,end};
        for(int ct=begin;ct<=end;ct++)
            dataset[ct-begin] = settings.data_location+"/"+ct+"/";
        
        jTextField1.setText("Custom "+begin+" "+end);
    }                                          

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        dataset = new String[]{"/Users/toddbodnar/data/20110420/SB_DATA_SB/"};
        dates = new int[]{20110420,20110420};
        jTextField1.setText("One Day");
    }                                          

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        twitterprocess copy[] = new twitterprocess[processes.size()];
        
        for(int i=0;i<copy.length;i++)
            copy[i] = processes.get(i);
        
        jobs.add(new job(dataset,copy));
        processes.clear();
        jList1.setText("");
        updateQueue();
    }                                        

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        processes.clear();
         
        try {
            JobFileIO.load(processes, dates);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dataset = new String[dates[1]-dates[0]+1];
        
        for(int ct=dates[0];ct<=dates[1];ct++)
            dataset[ct-dates[0]] = settings.data_location+"/"+ct+"/";
        
        
        jTextField1.setText("Custom "+dates[0]+" "+dates[1]);
        
        jList1.setText("");
        for(twitterprocess t:processes)
             jList1.setText(jList1.getText()+"\n"+t.toString());
    }                                          

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        (new Thread(new Runnable() {

            @Override
            public void run() {
                new settings_gui().setVisible(true);
            }
        })).start();
    }                                          

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            JobFileIO.save(processes, dates);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                          

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.dispose();
        
        if(!jobs.isEmpty())
        
        {
            JOptionPane.showMessageDialog(this, "Program will finish running "+jobs.size()+" jobs before exiting.");
            
            while(jobs.size()>0)
            {
                try {
                    Thread.sleep(30);
                } catch (InterruptedException ex) {
                    Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        try {
                    Thread.sleep(30);
                } catch (InterruptedException ex) {
                    Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                }
        System.exit(0);
    }                                          

    private class job
    {
        public job(String dataset[], twitterprocess processes[])
        {
            data = dataset;
            process = processes;
        }
        public String toString()
        {
            String s=data[0];
            if(data.length>1)
                s+="  -  "+data[data.length-1];
            s+="\n\n";
            
            for(twitterprocess t:process)
                s+=t.toString()+"\n";
            
            return s+"\n--------------";
        }
        public String[] data;
        public twitterprocess process[];
        main_gui frame;
        
    }
    
    public static void headless(String args[])
    {
        try {
            File f = new File(args[args.length-1]);
            List<twitterprocess>processes = new LinkedList<twitterprocess>();
            int dates[] = new int[2];
            JobFileIO.load(f, processes, dates);
            String[] dataset; //= new String[dates[1]-dates[0]+1];
            for(int ct=dates[0];ct<=dates[1];ct++)
            {
                //dataset[ct-dates[0]] = "/Users/toddbodnar/data/"+ct+"/";
                //dataset[ct-dates[0]] = "/gpfs/home/tjb5215/scratch/allTweets/tweets/"+ct+"/";
            }
            
            dataset = new String[]{settings.data_location};
        
            System.out.println("Timeframe: "+dates[0]+" "+dates[1]);
        
            System.out.println("----");
             for(twitterprocess t:processes)
                  System.out.println(t.toString());
             
             twitterprocess copy[] = new twitterprocess[processes.size()];
        
            for(int i=0;i<copy.length;i++)
                 copy[i] = processes.get(i);
        
             System.out.println("\n----\n\nRunning");
             
             tweet_consumer.consume(dataset,copy,"",null);
             
             System.out.println("Done");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //args = new String[]{"/Users/toddbodnar/Desktop/chagas_script"};
        if(args.length>0)
        {
            try {
                settings_gui.load();
            } catch (IOException ex) {
                System.err.println("Error, could not find config file");
                Logger.getLogger(main_gui.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(-5);
            }
            headless(args);
        }
        else
        {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
            try {
                settings_gui.load();
            } catch (IOException ex) {
                //Logger.getLogger(mainGui.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,"Settings are not set, please do so in edit->settings");
            }
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new main_gui().setVisible(true);
            }
        });
        }
    }
    // Variables declaration - do not modify                     
    public javax.swing.JProgressBar inputbuffer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextArea jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JProgressBar prog;
    public javax.swing.JTextArea reportArea;
    public javax.swing.JLabel timeremaining;
    public javax.swing.JProgressBar tweetbuffer;
    // End of variables declaration                   
}
